"use strict";
/**
 * @file base model 基础模块
 * @author Yourtion Guo <yourtion@gmail.com>
 */
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Squel = __importStar(require("squel"));
exports.squel = Squel.useFlavour("mysql");
const SELETE_OPT = { autoQuoteTableNames: true, autoQuoteFieldNames: true };
/**
 * 删除对象中的 undefined
 */
function removeUndefined(object) {
    Object.keys(object).forEach(key => object[key] === undefined && delete object[key]);
    if (Object.keys.length === 0) {
        throw Error("Object is empty");
    }
    return object;
}
/**
 * 解析 Where
 * - key-value 直接使用 =
 * - 以 $ 开头直接解析（数组直接析构）
 * - 以 # 开头解析为 like %*%
 * - 数组类型使用 in 方式
 */
function parseWhere(sql, conditions) {
    Object.keys(conditions).forEach(k => {
        const condition = conditions[k];
        if (k.indexOf("$") === 0) {
            // 以 $ 开头直接解析
            if (Array.isArray(condition)) {
                sql.where(condition[0], ...condition.slice(1));
            }
            else {
                sql.where(condition);
            }
        }
        else if (k.indexOf("#") !== -1) {
            // 以 # 开头解析为 like
            sql.where(`${k.replace("#", "")} like ?`, "%" + condition + "%");
        }
        else if (k.indexOf("$") !== -1) {
            sql.where(k.replace("$", ""), condition);
        }
        else if (Array.isArray(condition)) {
            // 数组类型使用 in 方式
            sql.where(`${k} in ?`, condition);
        }
        else {
            // 使用查询条件解析
            sql.where(`${k} = ?`, condition);
        }
    });
}
class EBase {
    constructor(table, connect, options = {}) {
        this.parseWhere = parseWhere;
        const tablePrefix = options.prefix !== undefined ? options.prefix : "";
        this.table = tablePrefix + table;
        this.primaryKey = options.primaryKey || "id";
        this.fields = options.fields || [];
        this.order = options.order;
        this.asc = options.asc || true;
        this.connect = connect;
        this.log = this.debugInfo(table);
    }
    /**
     * 查询方法（内部查询尽可能调用这个，会打印Log）
     */
    query(sql, connection = this.connect) {
        const logger = connection.debug ? connection.debug : this.log;
        if (typeof sql === "string") {
            logger(sql);
            return connection.queryAsync(sql).catch(this.errorHandler);
        }
        const { text, values } = sql.toParam();
        logger(sql.toString());
        return connection.queryAsync(text, values).catch(this.errorHandler);
    }
    _count(conditions = {}) {
        const sql = exports.squel
            .select()
            .from(this.table)
            .field("COUNT(*)", "c");
        parseWhere(sql, conditions);
        return sql;
    }
    countRaw(connect, conditions = {}) {
        return this.query(this._count(conditions), connect).then((res) => res && res[0] && res[0].c);
    }
    /**
     * 计算数据表 count
     */
    count(conditions = {}) {
        return this.countRaw(this.connect, conditions);
    }
    _getByPrimary(primary, fields) {
        if (primary === undefined) {
            throw new Error("`primary` 不能为空");
        }
        const sql = exports.squel
            .select(SELETE_OPT)
            .from(this.table)
            .where(this.primaryKey + " = ?", primary)
            .limit(1);
        fields.forEach(f => sql.field(f));
        return sql;
    }
    getByPrimaryRaw(connect, primary, fields = this.fields) {
        return this.query(this._getByPrimary(primary, fields), connect).then((res) => res && res[0]);
    }
    /**
     * 根据主键获取数据
     */
    getByPrimary(primary, fields = this.fields) {
        return this.getByPrimaryRaw(this.connect, primary, fields);
    }
    _getOneByField(object = {}, fields = this.fields) {
        const sql = exports.squel
            .select(SELETE_OPT)
            .from(this.table)
            .limit(1);
        fields.forEach(f => sql.field(f));
        parseWhere(sql, object);
        return sql;
    }
    getOneByFieldRaw(connect, object = {}, fields = this.fields) {
        return this.query(this._getOneByField(object, fields), connect).then((res) => res && res[0]);
    }
    /**
     * 根据查询条件获取一条记录
     */
    getOneByField(object = {}, fields = this.fields) {
        return this.getOneByFieldRaw(this.connect, object, fields);
    }
    _deleteByPrimary(primary, limit = 1) {
        if (primary === undefined) {
            throw new Error("`primary` 不能为空");
        }
        return exports.squel
            .delete()
            .from(this.table)
            .where(this.primaryKey + " = ?", primary)
            .limit(limit);
    }
    deleteByPrimaryRaw(connect, primary, limit = 1) {
        return this.query(this._deleteByPrimary(primary, limit), connect).then((res) => res && res.affectedRows);
    }
    /**
     * 根据主键删除数据
     */
    deleteByPrimary(primary, limit = 1) {
        return this.deleteByPrimaryRaw(this.connect, primary, limit);
    }
    _deleteByField(conditions, limit = 1) {
        const sql = exports.squel
            .delete()
            .from(this.table)
            .limit(limit);
        Object.keys(conditions).forEach(k => sql.where(k + (Array.isArray(conditions[k]) ? " in" : " =") + " ? ", conditions[k]));
        return sql;
    }
    deleteByFieldRaw(connect, conditions, limit = 1) {
        return this.query(this._deleteByField(conditions, limit), connect).then((res) => res && res.affectedRows);
    }
    /**
     * 根据查询条件删除数据
     */
    deleteByField(conditions, limit = 1) {
        return this.deleteByFieldRaw(this.connect, conditions, limit);
    }
    /**
     * 根据查询条件获取记录
     */
    getByField(conditions = {}, fields = this.fields) {
        return this.list(conditions, fields, 999);
    }
    _insert(object = {}) {
        removeUndefined(object);
        return exports.squel
            .insert()
            .into(this.table)
            .setFields(object);
    }
    insertRaw(connect, object = {}) {
        return this.query(this._insert(object), connect);
    }
    /**
     * 插入一条数据
     */
    insert(object = {}) {
        return this.insertRaw(this.connect, object);
    }
    _batchInsert(array) {
        array.forEach(o => removeUndefined(o));
        return exports.squel
            .insert()
            .into(this.table)
            .setFieldsRows(array);
    }
    /**
     * 批量插入数据
     */
    batchInsert(array) {
        return this.query(this._batchInsert(array));
    }
    _updateByField(conditions, objects, raw = false) {
        if (!conditions || Object.keys(conditions).length < 1) {
            throw new Error("`key` 不能为空");
        }
        removeUndefined(objects);
        const sql = exports.squel.update().table(this.table);
        Object.keys(conditions).forEach(k => sql.where(`${k} = ?`, conditions[k]));
        if (!raw) {
            return sql.setFields(objects);
        }
        Object.keys(objects).forEach(k => {
            if (k.indexOf("$") === 0) {
                sql.set(objects[k]);
            }
            else {
                sql.set(`${k} = ?`, objects[k]);
            }
        });
        return sql;
    }
    updateByFieldRaw(connect, conditions, objects, raw = false) {
        return this.query(this._updateByField(conditions, objects), connect).then((res) => res && res.affectedRows);
    }
    /**
     * 根据查询条件更新记录
     */
    updateByField(conditions, objects, raw = false) {
        return this.updateByFieldRaw(this.connect, conditions, objects).then((res) => res && res.affectedRows);
    }
    /**
     * 根据主键更新记录
     */
    updateByPrimary(primary, objects, raw = false) {
        if (primary === undefined) {
            throw new Error("`primary` 不能为空");
        }
        const condition = {};
        condition[this.primaryKey] = primary;
        return this.updateByField(condition, objects, raw).then((res) => res && res.affectedRows);
    }
    _createOrUpdate(objects, update = Object.keys(objects)) {
        removeUndefined(objects);
        const sql = exports.squel.insert().into(this.table);
        sql.setFields(objects);
        update.forEach(k => {
            if (Array.isArray(objects[k])) {
                sql.onDupUpdate(objects[k][0], objects[k][1]);
            }
            else if (objects[k] !== undefined) {
                sql.onDupUpdate(k, objects[k]);
            }
        });
        return sql;
    }
    /**
     * 创建一条记录，如果存在就更新
     */
    createOrUpdate(objects, update = Object.keys(objects)) {
        return this.query(this._createOrUpdate(objects, update));
    }
    _incrFields(primary, fields, num = 1) {
        if (primary === undefined) {
            throw new Error("`primary` 不能为空");
        }
        const sql = exports.squel
            .update()
            .table(this.table)
            .where(this.primaryKey + " = ?", primary);
        fields.forEach(f => sql.set(`${f} = ${f} + ${num}`));
        return sql;
    }
    incrFieldsRaw(connect, primary, fields, num = 1) {
        return this.query(this._incrFields(primary, fields, num), connect).then((res) => res && res.affectedRows);
    }
    /**
     * 根据主键对数据列执行加一操作
     */
    incrFields(primary, fields, num = 1) {
        return this.incrFieldsRaw(this.connect, primary, fields, num);
    }
    _list(conditions = {}, fields = this.fields, limit = 999, offset = 0, order = this.order, asc = this.asc) {
        removeUndefined(conditions);
        const sql = exports.squel
            .select(SELETE_OPT)
            .from(this.table)
            .offset(offset)
            .limit(limit);
        fields.forEach(f => sql.field(f));
        parseWhere(sql, conditions);
        if (order) {
            sql.order(order, asc);
        }
        return sql;
    }
    listRaw(connect, conditions = {}, fields = this.fields, ...args) {
        if (args.length === 2 && typeof args[1] === "object") {
            return this.query(this._list(conditions, fields, args[0].limit, args[0].offset, args[0].order, args[0].asc), connect);
        }
        return this.query(this._list(conditions, fields, ...args), connect);
    }
    list(conditions = {}, fields = this.fields, ...args) {
        return this.listRaw(this.connect, conditions, fields, ...args);
    }
    _search(keyword, search, fields = this.fields, limit = 10, offset = 0, order = this.order, asc = true) {
        if (!keyword || search.length < 1) {
            throw new Error("`keyword` | `search` 不能为空");
        }
        const sql = exports.squel
            .select(SELETE_OPT)
            .from(this.table)
            .offset(offset)
            .limit(limit);
        fields.forEach(f => sql.field(f));
        const exp = exports.squel.expr();
        search.forEach(k => {
            exp.or(`${k} like ?`, "%" + keyword + "%");
        });
        sql.where(exp);
        if (order) {
            sql.order(order, asc);
        }
        return sql;
    }
    search(keyword, search, fields = this.fields, ...args) {
        if (args.length === 1 && typeof args[0] === "object") {
            return this.query(this._search(keyword, search, fields, args[0].limit, args[0].offset, args[0].order, args[0].asc));
        }
        return this.query(this._search(keyword, search, fields, ...args));
    }
    page(conditions = {}, fields = this.fields, ...args) {
        const listSql = this.list(conditions, fields, ...args);
        const countSql = this.count(conditions);
        return Promise.all([listSql, countSql]).then(([list, count = 0]) => list && { count, list });
    }
    /**
     * 执行事务（通过传入方法）
     */
    transactions(name, func) {
        return async () => {
            if (!name) {
                throw new Error("`name` 不能为空");
            }
            // utils.randomString(6);
            const tid = "";
            const debug = this.debugInfo(`Transactions[${tid}] - ${name}`);
            const connection = await this.connect.getConnectionAsync();
            connection.debug = debug;
            await connection.beginTransactionAsync(); // 开始事务
            debug("Transaction Begin");
            try {
                const result = await func(connection);
                await connection.commitAsync(); // 提交事务
                debug(`result: ${result}`);
                debug("Transaction Done");
                return result;
            }
            catch (err) {
                // 回滚错误
                await connection.rollbackAsync();
                debug(`Transaction Rollback ${err.code}`);
                this.errorHandler(err);
            }
            finally {
                connection.release();
            }
        };
    }
    /**
     * 执行事务（通过传人SQL语句数组）
     */
    transactionSQLs(sqls) {
        return async () => {
            if (!sqls || sqls.length < 1) {
                throw new Error("`sqls` 不能为空");
            }
            this.log("Begin Transaction");
            const connection = await this.connect.getConnectionAsync();
            await connection.beginTransactionAsync();
            try {
                for (const sql of sqls) {
                    this.log(`Transaction SQL: ${sql}`);
                    await connection.queryAsync(sql);
                }
                const res = await connection.commitAsync();
                this.log("Done Transaction");
                return res;
            }
            catch (err) {
                await connection.rollbackAsync();
                this.log("Rollback Transaction");
                this.errorHandler(err);
            }
            finally {
                await connection.release();
            }
        };
    }
}
exports.default = EBase;
//# sourceMappingURL=index.js.map